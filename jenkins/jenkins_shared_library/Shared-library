In Jenkins, go to Manage Jenkins â†’ Configure System. Under Global Pipeline Libraries, add a library with the following settings:

Name: pipeline-library-demo
Default version: Specify a Git reference (branch or commit SHA), e.g. master
Retrieval method: Modern SCM
Select the Git type
Project repository: https://github.com/monodot/pipeline-library-demo.git
Credentials: (leave blank)
Then create a Jenkins job with the following pipeline (note that the underscore _ is not a typo):
---------------------------------------------------
def call() {
    sh "echo Hello World"
}
------
@Library("shared-library") _
pipeline {
    agent any

    stages {
        stage('Hello') {
            steps {
                helloWorld()
            }
        }
    }
}
-----------------
def call (String name,String dayOfWeek) {
    sh "echo Hello ${name} . today is ${dayOfWeek}"
}
------
@Library("shared-library") _
pipeline {
    agent any

    stages {
        stage('Example') {
            steps {
                helloWorld('harshal','sunday')
            }
        }
    }
}
------
def call(Map config = [:]) {
    sh "echo Hello ${config.name}. Today is ${config.dayOfWeek}."
}
----
@Library("shared-library") _
pipeline {
    agent any

    stages {
        stage('Example') {
            steps {
                helloWorld(name :"harshal",dayOfWeek:"sunday")
            }
        }
    }
}

-----------------------------------------------------------------------------------------------
@Library("jenkins-library") _
pipeline {
    agent any
    tools {
        maven 'maven3'
        jdk 'jdk17'
    }

    stages {
        stage('checkout') {
            steps {
               checkout scmGit(branches: [[name: '*/master']], extensions: [], userRemoteConfigs: [[url: 'https://github.com/harshalgaikwad25/war-web-project.git']])
            }
        }
        stage ('maven test') {
            steps {
                sh "echo maven Test "
                mavenTest()
        }
        }
        stage ('maven build') {
            steps {
                sh "echo maven build package"
                mavenBuild()
            }
        }
  //      stage('Docker build and tag') {
    //        steps {
    //            script {
                    // Call the dockerBuild function from the shared library
      //              dockerBuild.buildAndTag(imageName: 'boardgame', tag: 'latest', registry: 'harshalgaikwad')
        //        }
         //   }
        //}
}
}
